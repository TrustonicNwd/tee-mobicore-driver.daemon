<?xml version="1.0" encoding="UTF-8"?>
<project name="RootPA" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

<!-- All the build information will be stored in a seperate logfile 
     including a timestamp. -->
<target name="log">
<tstamp><format property="timestamp" pattern="yyyy-MM-dd_HH-mm-ss"/></tstamp>
<property name="build.log.dir" location="${basedir}/buildlogs"/>
<mkdir dir="${build.log.dir}"/>
<property name="build.log.filename" value="build_${timestamp}.log"/>
<record name="${build.log.dir}/${build.log.filename}" loglevel="verbose" append="false"/>
<echo message="Build logged to ${build.log.filename}"/>
</target>

    <!-- if sdk.dir was not set from one of the property file, then
         get it from the ANDROID_HOME env var.
         This must be done before we load project.properties since
         the proguard config can use sdk.dir -->
    <property environment="env" />
<condition property="ndk.dir" value="${env.NDK_HOME}">
     <isset property="env.NDK_HOME" />
</condition>
    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
        <isset property="env.ANDROID_HOME" />
    </condition>

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

<!-- 
-Update android project
-Running ndk-build to compile native android sources-->

<target name="windows">

<exec executable="cmd"
    failonerror="true">
        <arg value="/c"/>
    <arg value="${env.ANDROID_HOME}/tools/android update project --path ./"/>
</exec>

<exec executable="${env.NDK_BUILD}/ndk-build.cmd"/>

<antcall target="copy_libs"/>

</target>

<target name="linux">

<exec
    executable="${env.ANDROID_HOME}/tools/android"
    failonerror="true">
        <arg value="update"/>
        <arg value="project"/>
        <arg value="-p"/>
        <arg value="."/>
</exec>

<exec executable="${env.NDK_BUILD}/ndk-build"/>
</target>


    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
            unless="sdk.dir"
    />

<!-- quick check on ndk.dir -->

<fail message="ndk.dir is missing. Make sure that the local.properties file defines it."
          unless="ndk.dir" />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <target name="-pre-build">
        <exec executable="ndk-build" dir="jni">    </exec>     
    </target>


    <target name="-pre-clean">
        <exec executable="ndk-build" dir="jni">
            <arg value="clean"/>  
        </exec> 
    </target>

    <target name="test" depends="debug">
    </target>    

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->


    <!-- the version tag is set to custom in order to avoid regenerating this file. The file has been modifies to make the project name different from the folder name -->
    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />
</project>
